// <auto-generated />
using System;
using GoodsExchange.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodsExchange.Data.Migrations
{
    [DbContext(typeof(GoodsExchangeDbContext))]
    partial class GoodsExchangeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            CategoryName = "School Supplies",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            CategoryName = "Art Supplies",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            CategoryName = "Electronics",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.Property<Guid>("PreOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BuyerConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("SellerConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TargetProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PreOrderId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrentProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TargetProductId");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("MaxPriceDifference")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserUploadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserUploadId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("010c482b-94c1-4a88-9953-0dd4b46dee21"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3402),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "Description for product 1",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 10f,
                            ProductName = "Product 1",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3399),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("be048b47-5638-498c-9520-e0cd41dd50ed"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3410),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "Description for product 2",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 20f,
                            ProductName = "Product 2",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3410),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("bccde73e-ffdc-4cea-97b6-44358b7dfac0"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3423),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "Description for product 3",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 30f,
                            ProductName = "Product 3",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3422),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("810c8f7f-3a99-44e2-870f-46898a13da33"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3426),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "Description for product 4",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 40f,
                            ProductName = "Product 4",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3426),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("b01dc1b5-143d-4a46-a17d-0850b31e3631"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3438),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "Description for product 5",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 50f,
                            ProductName = "Product 5",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3438),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("cbe91ff9-0c2a-4e66-be62-b4e5815c8171"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3477),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "Description for product 6",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 60f,
                            ProductName = "Product 6",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3476),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("d52c55fb-3040-472c-ae33-effc58c59a48"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3483),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "Description for product 7",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 70f,
                            ProductName = "Product 7",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3483),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("70103561-b4c6-4970-8032-a033956096af"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3486),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "Description for product 8",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 80f,
                            ProductName = "Product 8",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3486),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("101f026f-f722-4f42-a21b-53f58991ef0c"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3489),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "Description for product 9",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 90f,
                            ProductName = "Product 9",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3489),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("44334523-6396-436a-bb06-8d20108aea93"),
                            ApprovedDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3495),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "Description for product 10",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 100f,
                            ProductName = "Product 10",
                            UploadDate = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3494),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d793bc32-4491-4f2d-821f-d8c0e0a2e719"),
                            Caption = "Image for product 1",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3407),
                            FileSize = 1024L,
                            ImagePath = "https://png.pngtree.com/element_origin_min_pic/16/09/23/1857e50467c5629.jpg",
                            ProductId = new Guid("010c482b-94c1-4a88-9953-0dd4b46dee21")
                        },
                        new
                        {
                            Id = new Guid("095f5d80-0941-4441-9dda-9136c0eb8679"),
                            Caption = "Image for product 2",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3412),
                            FileSize = 2048L,
                            ImagePath = "https://img.lovepik.com/element/40145/4924.png_860.png",
                            ProductId = new Guid("be048b47-5638-498c-9520-e0cd41dd50ed")
                        },
                        new
                        {
                            Id = new Guid("ff250afb-a98a-4159-990b-8ef8c47421cf"),
                            Caption = "Image for product 3",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3424),
                            FileSize = 3072L,
                            ImagePath = "https://img.lovepik.com/element/40154/8917.png_300.png",
                            ProductId = new Guid("bccde73e-ffdc-4cea-97b6-44358b7dfac0")
                        },
                        new
                        {
                            Id = new Guid("8a887fbc-88a6-45cb-a466-dfa8aaaf5b9f"),
                            Caption = "Image for product 4",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3427),
                            FileSize = 4096L,
                            ImagePath = "https://img.lovepik.com/element/40148/8397.png_300.png",
                            ProductId = new Guid("810c8f7f-3a99-44e2-870f-46898a13da33")
                        },
                        new
                        {
                            Id = new Guid("2212b9bf-ff2f-4901-a194-1961bfaa5f61"),
                            Caption = "Image for product 5",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3441),
                            FileSize = 5120L,
                            ImagePath = "https://img.lovepik.com/original_origin_pic/18/08/09/ad4800dc49f64e450ae5f7d2c15bbd69.png_wh300.png",
                            ProductId = new Guid("b01dc1b5-143d-4a46-a17d-0850b31e3631")
                        },
                        new
                        {
                            Id = new Guid("47ddb1da-fa4e-444e-b3b0-78a46fd6605d"),
                            Caption = "Image for product 6",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3478),
                            FileSize = 6144L,
                            ImagePath = "https://img.lovepik.com/png/20231021/School-office-supplies-binding-machine-stapler-book-stationery_289576_wh300.png",
                            ProductId = new Guid("cbe91ff9-0c2a-4e66-be62-b4e5815c8171")
                        },
                        new
                        {
                            Id = new Guid("8b80c5ac-d735-4766-98dc-38f475a7f834"),
                            Caption = "Image for product 7",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3484),
                            FileSize = 7168L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-cute.jpg",
                            ProductId = new Guid("d52c55fb-3040-472c-ae33-effc58c59a48")
                        },
                        new
                        {
                            Id = new Guid("f0f5a55e-1d97-4f52-9558-75391877ae77"),
                            Caption = "Image for product 8",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3487),
                            FileSize = 8192L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-de-thuong.jpg",
                            ProductId = new Guid("70103561-b4c6-4970-8032-a033956096af")
                        },
                        new
                        {
                            Id = new Guid("277eb58d-a3dc-4dfc-a1ac-5c242bc44257"),
                            Caption = "Image for product 9",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3492),
                            FileSize = 9216L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQClbO9Pb9b1e1cm18mublklMG69UYXdPgGgbeNGPutxgObEWNt0gMTNXmOHZInEp8O1ro&usqp=CAU",
                            ProductId = new Guid("101f026f-f722-4f42-a21b-53f58991ef0c")
                        },
                        new
                        {
                            Id = new Guid("a367693a-6077-4479-b52f-0bcb9deff0ea"),
                            Caption = "Image for product 10",
                            DateCreated = new DateTime(2024, 7, 25, 15, 25, 19, 789, DateTimeKind.Utc).AddTicks(3496),
                            FileSize = 10240L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxXUh1O9kqmHicXzEZYoksQl0zKVwNW3KRoI2N39oO3Yyw33D03xmltVXOqTtbTa3gAfU&usqp=CAU",
                            ProductId = new Guid("44334523-6396-436a-bb06-8d20108aea93")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PreOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("PreOrderId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0af02748-9d43-4110-81e5-93d9ece8cfda"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhkhoa@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Minh",
                            IsActive = false,
                            LastName = "Khoa",
                            Password = "$2a$11$rAu8lKC0F3RBLJiAmgqfA.iYcd2oxEUiRtuQ0H6XHNQMCuXaIdHJe",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            UserImageUrl = "",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = new Guid("b6b6e80f-cc04-43e3-800f-a3c89b3ba017"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamthanh@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Pham",
                            IsActive = false,
                            LastName = "Thanh",
                            Password = "$2a$11$1LJ4bNdCGGw8RfXMdCuMLu4LwxxOEmNit8FGfKskjiR1RZM5XwotK",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "moderator"
                        },
                        new
                        {
                            UserId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phuongthao@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Phuong",
                            IsActive = false,
                            LastName = "Thao",
                            Password = "$2a$11$J9ZitJ30zjeLxzGP71TMAus7L6kx3AUhnBtkaf79IBX0AojtfzFEO",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "phuongthao"
                        },
                        new
                        {
                            UserId = new Guid("fda6e282-e429-4364-a445-136b570e2fde"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quoctrieu@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Quoc",
                            IsActive = false,
                            LastName = "Trieu",
                            Password = "$2a$11$yuiAfGdKCjDZUCQJ.muDlu8PkK1XBtiWzpTEiM9rHQ8h6g4egkP3m",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "quoctrieu"
                        },
                        new
                        {
                            UserId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haugiang@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Hau",
                            IsActive = false,
                            LastName = "Giang",
                            Password = "$2a$11$45x5bx.zn7Fj25RlYcq4I.hNrHtjon2tdpmiV4LqhJ.soSBE81ACq",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "haugiang"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.User", "Buyer")
                        .WithMany("PreOrderToBuyers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.Product", "CurrentProduct")
                        .WithMany("ExchangeRequestsSent")
                        .HasForeignKey("CurrentProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Seller")
                        .WithMany("PreOrderToSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.Product", "TargetProduct")
                        .WithMany("ExchangeRequestsReceived")
                        .HasForeignKey("TargetProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("CurrentProduct");

                    b.Navigation("Seller");

                    b.Navigation("TargetProduct");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "UserUpload")
                        .WithMany("Products")
                        .HasForeignKey("UserUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserUpload");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithOne("Rate")
                        .HasForeignKey("GoodsExchange.Data.Models.Rating", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("ReportsMade")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Transaction", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.PreOrder", "PreOrder")
                        .WithOne("Transaction")
                        .HasForeignKey("GoodsExchange.Data.Models.Transaction", "PreOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PreOrder");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Navigation("ExchangeRequestsReceived");

                    b.Navigation("ExchangeRequestsSent");

                    b.Navigation("ProductImages");

                    b.Navigation("Rate")
                        .IsRequired();

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Navigation("PreOrderToBuyers");

                    b.Navigation("PreOrderToSellers");

                    b.Navigation("Products");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
