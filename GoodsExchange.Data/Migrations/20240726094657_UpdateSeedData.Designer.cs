// <auto-generated />
using System;
using GoodsExchange.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodsExchange.Data.Migrations
{
    [DbContext(typeof(GoodsExchangeDbContext))]
    [Migration("20240726094657_UpdateSeedData")]
    partial class UpdateSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            CategoryName = "School Supplies",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            CategoryName = "Stationery",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            CategoryName = "Textbooks",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            CategoryName = "Lab Equipment",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.Property<Guid>("PreOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BuyerConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("SellerConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TargetProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PreOrderId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrentProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TargetProductId");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("MaxPriceDifference")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserUploadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserUploadId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("43e815c3-5990-480f-911c-f3bf3c3d7233"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6382),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A spacious and ergonomic backpack designed to carry all your school supplies comfortably.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 764265.2f,
                            ProductName = "High-Quality Ruler Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6378),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("7e7234a3-92fe-41cb-8aa9-eac238553a41"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6429),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "A precision measuring cylinder designed for accurate measurement of liquids in laboratory settings.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 377787.47f,
                            ProductName = "Mechanical Pencil Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6429),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("5262322b-9227-4920-9341-2c692b30f0d6"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6433),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A set of durable rulers made from high-quality materials, perfect for accurate measurements and drawings.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 321976.34f,
                            ProductName = "History of Ancient Civilizations",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6432),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("4c11dc28-7ed8-4aac-a75d-95673ad1d221"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6438),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "A precision measuring cylinder designed for accurate measurement of liquids in laboratory settings.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 235856.48f,
                            ProductName = "History of Ancient Civilizations",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6437),
                            UserUploadId = new Guid("4c99eef2-baca-4394-8d45-47e5f805e0f0")
                        },
                        new
                        {
                            ProductId = new Guid("8816b4e5-c309-49a1-9872-8333136932b3"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6440),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A detailed textbook offering a thorough overview of biological principles and scientific explorations.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 49317.543f,
                            ProductName = "Assorted Sticky Notes",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6440),
                            UserUploadId = new Guid("09481859-e811-4584-b2dd-0a74c8adfaaf")
                        },
                        new
                        {
                            ProductId = new Guid("1820c712-ca25-4793-a678-2f5813657a01"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6444),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "An introductory textbook designed to help students understand the basic principles of physics.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 124400.84f,
                            ProductName = "Spiral Notebook",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6444),
                            UserUploadId = new Guid("d3bbeb03-d683-47cc-9ef0-0a2b36c2788a")
                        },
                        new
                        {
                            ProductId = new Guid("75830a75-79b4-45f7-bf9b-cbba7ba94bd4"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6447),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A spiral-bound notebook with a durable cover, ideal for taking notes and journaling.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 528709.7f,
                            ProductName = "Laboratory Measuring Cylinder",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6447),
                            UserUploadId = new Guid("97108917-856a-42af-937b-7b0e2e735b20")
                        },
                        new
                        {
                            ProductId = new Guid("1a8b33a2-6aab-4305-a30a-eeaeeace18d7"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6451),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "A spacious and ergonomic backpack designed to carry all your school supplies comfortably.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 93148.234f,
                            ProductName = "History of Ancient Civilizations",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6451),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("8f146fe3-f88f-42d6-b169-edf714a89870"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6454),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A precision measuring cylinder designed for accurate measurement of liquids in laboratory settings.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 667086.94f,
                            ProductName = "Glass Beaker Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6454),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("e905df33-1915-4c18-b767-bef8bd363986"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6458),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "A pack of colorful sticky notes for quick reminders, notes, and organizing your tasks.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 564574f,
                            ProductName = "Student Backpack",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6457),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("18b07a07-0d1c-43f4-aece-3584efe512e5"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6460),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A detailed textbook offering a thorough overview of biological principles and scientific explorations.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 537611.44f,
                            ProductName = "Microscope with LED Illumination",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6460),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("1ec92f68-c6bf-4127-8dcd-69421c0b2b73"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6465),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "A detailed textbook offering a thorough overview of biological principles and scientific explorations.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 226357.75f,
                            ProductName = "Spiral Notebook",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6464),
                            UserUploadId = new Guid("4c99eef2-baca-4394-8d45-47e5f805e0f0")
                        },
                        new
                        {
                            ProductId = new Guid("af9f9e43-2944-46a7-a6ea-1cd868ab2763"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6467),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A digital thermometer with high precision for measuring temperatures in scientific experiments.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 4952.9097f,
                            ProductName = "High-Quality Ruler Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6467),
                            UserUploadId = new Guid("09481859-e811-4584-b2dd-0a74c8adfaaf")
                        },
                        new
                        {
                            ProductId = new Guid("03280ff4-7a5d-4af5-931d-6e5c96742cd3"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6470),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "An elegant fountain pen with a sleek design, ideal for professional writing and note-taking.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 788722.75f,
                            ProductName = "Coloring Pencil Pack",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6470),
                            UserUploadId = new Guid("d3bbeb03-d683-47cc-9ef0-0a2b36c2788a")
                        },
                        new
                        {
                            ProductId = new Guid("fa675979-2d4a-4a08-9f9b-a39667cb6493"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6480),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A high-quality microscope featuring LED illumination for clear and detailed observation of specimens.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 943995.5f,
                            ProductName = "Student Backpack",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6480),
                            UserUploadId = new Guid("97108917-856a-42af-937b-7b0e2e735b20")
                        },
                        new
                        {
                            ProductId = new Guid("07c706e3-39f5-4236-8630-01f372246d2a"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6485),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "An in-depth textbook exploring the history and achievements of ancient civilizations from around the world.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 33373.3f,
                            ProductName = "Digital Thermometer",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6484),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("2f09a4a8-4206-4d51-8f2e-6329fb99ffc9"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6487),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A set of high-quality mechanical pencils with refillable lead, perfect for precise writing.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 819358.94f,
                            ProductName = "Glass Beaker Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6487),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        },
                        new
                        {
                            ProductId = new Guid("0cd2ef46-8ac3-4466-ba0b-1ec030e9d872"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6492),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "A set of high-quality mechanical pencils with refillable lead, perfect for precise writing.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 52668.08f,
                            ProductName = "Spiral Notebook",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6491),
                            UserUploadId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ProductId = new Guid("e67b9e1b-2f70-497d-9286-440ce6c5896e"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6494),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A high-quality microscope featuring LED illumination for clear and detailed observation of specimens.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 319874.5f,
                            ProductName = "History of Ancient Civilizations",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6494),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("b06c84a3-3aa0-4025-93e6-1c2e52650445"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6498),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "A spiral-bound notebook with a durable cover, ideal for taking notes and journaling.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 869872.2f,
                            ProductName = "Biology: Principles and Explorations",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6498),
                            UserUploadId = new Guid("4c99eef2-baca-4394-8d45-47e5f805e0f0")
                        },
                        new
                        {
                            ProductId = new Guid("f385650c-be71-467b-b293-5afc487fc53c"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6501),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A set of high-quality mechanical pencils with refillable lead, perfect for precise writing.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 98511.56f,
                            ProductName = "Glass Beaker Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6500),
                            UserUploadId = new Guid("09481859-e811-4584-b2dd-0a74c8adfaaf")
                        },
                        new
                        {
                            ProductId = new Guid("58096fa8-3778-4d41-9858-843eb3dc6d14"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6578),
                            CategoryId = new Guid("d7fde8ab-4995-4252-8c34-0d6a4077f1e3"),
                            Description = "A digital thermometer with high precision for measuring temperatures in scientific experiments.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 952683.3f,
                            ProductName = "High-Quality Ruler Set",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6577),
                            UserUploadId = new Guid("d3bbeb03-d683-47cc-9ef0-0a2b36c2788a")
                        },
                        new
                        {
                            ProductId = new Guid("67125c24-ef8e-40fe-91e6-7fc424b7f277"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6581),
                            CategoryId = new Guid("93838a5d-b3c7-4c47-ba22-f6e26755203f"),
                            Description = "A high-quality microscope featuring LED illumination for clear and detailed observation of specimens.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 316753.84f,
                            ProductName = "Elegant Fountain Pen",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6580),
                            UserUploadId = new Guid("97108917-856a-42af-937b-7b0e2e735b20")
                        },
                        new
                        {
                            ProductId = new Guid("4de03fab-46a7-43a6-b021-c217cceecf4b"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6585),
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            Description = "A set of durable glass beakers with clear measurement markings for laboratory use.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 257058.06f,
                            ProductName = "Spiral Notebook",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6585),
                            UserUploadId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54")
                        },
                        new
                        {
                            ProductId = new Guid("835ac99f-3a70-4684-ad2c-753d0ec444d3"),
                            ApprovedDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6588),
                            CategoryId = new Guid("765fa035-d385-4ae3-a86b-7e4bea643060"),
                            Description = "A set of durable rulers made from high-quality materials, perfect for accurate measurements and drawings.",
                            IsActive = true,
                            IsApproved = true,
                            IsReviewed = false,
                            MaxPriceDifference = 0f,
                            Price = 842763.25f,
                            ProductName = "Digital Thermometer",
                            UploadDate = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6588),
                            UserUploadId = new Guid("fda6e282-e429-4364-a445-136b570e2fde")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4acb3d0-78cf-4400-a3ee-a2c9f1c5e2e9"),
                            Caption = "Image for High-Quality Ruler Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6424),
                            FileSize = 1024L,
                            ImagePath = "https://png.pngtree.com/element_origin_min_pic/16/09/23/1857e50467c5629.jpg",
                            ProductId = new Guid("43e815c3-5990-480f-911c-f3bf3c3d7233")
                        },
                        new
                        {
                            Id = new Guid("2fc4093d-881b-4d7c-80e8-9b0efa78c8a2"),
                            Caption = "Image for Mechanical Pencil Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6431),
                            FileSize = 2048L,
                            ImagePath = "https://img.lovepik.com/element/40145/4924.png_860.png",
                            ProductId = new Guid("7e7234a3-92fe-41cb-8aa9-eac238553a41")
                        },
                        new
                        {
                            Id = new Guid("2fc5656d-0d2a-44ec-a267-056f844f112a"),
                            Caption = "Image for History of Ancient Civilizations",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6434),
                            FileSize = 3072L,
                            ImagePath = "https://img.lovepik.com/element/40154/8917.png_300.png",
                            ProductId = new Guid("5262322b-9227-4920-9341-2c692b30f0d6")
                        },
                        new
                        {
                            Id = new Guid("d6a5edf0-3f53-47b3-a2be-664cff78a1e0"),
                            Caption = "Image for History of Ancient Civilizations",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6439),
                            FileSize = 4096L,
                            ImagePath = "https://img.lovepik.com/element/40148/8397.png_300.png",
                            ProductId = new Guid("4c11dc28-7ed8-4aac-a75d-95673ad1d221")
                        },
                        new
                        {
                            Id = new Guid("23762dcd-04fb-4db5-815e-de9bdaf90647"),
                            Caption = "Image for Assorted Sticky Notes",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6442),
                            FileSize = 5120L,
                            ImagePath = "https://img.lovepik.com/original_origin_pic/18/08/09/ad4800dc49f64e450ae5f7d2c15bbd69.png_wh300.png",
                            ProductId = new Guid("8816b4e5-c309-49a1-9872-8333136932b3")
                        },
                        new
                        {
                            Id = new Guid("3c30b671-b1e6-460b-a592-88834ea284ad"),
                            Caption = "Image for Spiral Notebook",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6445),
                            FileSize = 6144L,
                            ImagePath = "https://img.lovepik.com/png/20231021/School-office-supplies-binding-machine-stapler-book-stationery_289576_wh300.png",
                            ProductId = new Guid("1820c712-ca25-4793-a678-2f5813657a01")
                        },
                        new
                        {
                            Id = new Guid("7e9f5a2f-b644-4a43-949a-801881097c4c"),
                            Caption = "Image for Laboratory Measuring Cylinder",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6448),
                            FileSize = 7168L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-cute.jpg",
                            ProductId = new Guid("75830a75-79b4-45f7-bf9b-cbba7ba94bd4")
                        },
                        new
                        {
                            Id = new Guid("3cdf2648-6dd9-4ebe-a59d-cf36cfa1a156"),
                            Caption = "Image for History of Ancient Civilizations",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6453),
                            FileSize = 8192L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-de-thuong.jpg",
                            ProductId = new Guid("1a8b33a2-6aab-4305-a30a-eeaeeace18d7")
                        },
                        new
                        {
                            Id = new Guid("4c12cd8a-1510-406e-a779-b45c2c28d12f"),
                            Caption = "Image for Glass Beaker Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6456),
                            FileSize = 9216L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQClbO9Pb9b1e1cm18mublklMG69UYXdPgGgbeNGPutxgObEWNt0gMTNXmOHZInEp8O1ro&usqp=CAU",
                            ProductId = new Guid("8f146fe3-f88f-42d6-b169-edf714a89870")
                        },
                        new
                        {
                            Id = new Guid("5d5c1a26-5d7d-4e40-9b22-36656a5c18d9"),
                            Caption = "Image for Student Backpack",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6459),
                            FileSize = 10240L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxXUh1O9kqmHicXzEZYoksQl0zKVwNW3KRoI2N39oO3Yyw33D03xmltVXOqTtbTa3gAfU&usqp=CAU",
                            ProductId = new Guid("e905df33-1915-4c18-b767-bef8bd363986")
                        },
                        new
                        {
                            Id = new Guid("88fd0fe9-ab3b-4dcf-97eb-9a8f0fe8ab6f"),
                            Caption = "Image for Microscope with LED Illumination",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6461),
                            FileSize = 11264L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSjY5xXwr880MJU4ZMkHoS4Kk9uBvJlVOocsyyr8c-SZIhpInnWpbdrTbxLSwIGRTqLtQE&usqp=CAU",
                            ProductId = new Guid("18b07a07-0d1c-43f4-aece-3584efe512e5")
                        },
                        new
                        {
                            Id = new Guid("e5279b1a-e43d-44df-bcab-2c3f8f5dfe14"),
                            Caption = "Image for Spiral Notebook",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6466),
                            FileSize = 12288L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTzAg7kp7XyYhhU7MlQDH_Or2jTxIPZuyl3j_hA01ywVLBmo5qSkIeTbDE4C7DaKdDlyI&usqp=CAU",
                            ProductId = new Guid("1ec92f68-c6bf-4127-8dcd-69421c0b2b73")
                        },
                        new
                        {
                            Id = new Guid("09fdbce9-ebeb-43dd-824b-2ec50f414593"),
                            Caption = "Image for High-Quality Ruler Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6468),
                            FileSize = 13312L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSo-afGGvOl-uAIciO_inSUbq8c2WrvHEA8zA&s",
                            ProductId = new Guid("af9f9e43-2944-46a7-a6ea-1cd868ab2763")
                        },
                        new
                        {
                            Id = new Guid("32e88b39-22b9-46d4-bd05-3311ccb04b6a"),
                            Caption = "Image for Coloring Pencil Pack",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6471),
                            FileSize = 14336L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNhUHteq_2myNyWXDG0-tdUmElcHC5ZufUbA&s",
                            ProductId = new Guid("03280ff4-7a5d-4af5-931d-6e5c96742cd3")
                        },
                        new
                        {
                            Id = new Guid("daf73ff7-bde0-4228-a8b2-17b32f7eee55"),
                            Caption = "Image for Student Backpack",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6481),
                            FileSize = 15360L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTEabvTjiSCtzyqA2S0JmFbTYH53qBm-WjioQ&s",
                            ProductId = new Guid("fa675979-2d4a-4a08-9f9b-a39667cb6493")
                        },
                        new
                        {
                            Id = new Guid("0be2af70-cfdf-48d4-b551-c23717f5f3a0"),
                            Caption = "Image for Digital Thermometer",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6486),
                            FileSize = 16384L,
                            ImagePath = "https://png.pngtree.com/png-vector/20190130/ourlarge/pngtree-simple-and-cute-school-supplies-stationery-suppliesstationerystaplerpenpencil-casecorrection-fluidrubber-png-image_674963.jpg",
                            ProductId = new Guid("07c706e3-39f5-4236-8630-01f372246d2a")
                        },
                        new
                        {
                            Id = new Guid("2d91ca6e-8b2f-4734-af27-a2edf0d42d87"),
                            Caption = "Image for Glass Beaker Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6489),
                            FileSize = 17408L,
                            ImagePath = "https://png.pngtree.com/element_origin_min_pic/16/09/23/1857e50467c5629.jpg",
                            ProductId = new Guid("2f09a4a8-4206-4d51-8f2e-6329fb99ffc9")
                        },
                        new
                        {
                            Id = new Guid("860cedf1-ad36-4165-9cfd-b4fb6354edab"),
                            Caption = "Image for Spiral Notebook",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6493),
                            FileSize = 18432L,
                            ImagePath = "https://img.lovepik.com/element/40145/4924.png_860.png",
                            ProductId = new Guid("0cd2ef46-8ac3-4466-ba0b-1ec030e9d872")
                        },
                        new
                        {
                            Id = new Guid("ea25fdc1-c7c7-47e1-9449-97f1f037cd65"),
                            Caption = "Image for History of Ancient Civilizations",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6495),
                            FileSize = 19456L,
                            ImagePath = "https://img.lovepik.com/element/40154/8917.png_300.png",
                            ProductId = new Guid("e67b9e1b-2f70-497d-9286-440ce6c5896e")
                        },
                        new
                        {
                            Id = new Guid("b2b5a8e7-6536-4f78-a812-367ad2b0ea83"),
                            Caption = "Image for Biology: Principles and Explorations",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6499),
                            FileSize = 20480L,
                            ImagePath = "https://img.lovepik.com/element/40148/8397.png_300.png",
                            ProductId = new Guid("b06c84a3-3aa0-4025-93e6-1c2e52650445")
                        },
                        new
                        {
                            Id = new Guid("138f4133-2ba6-4601-a5d4-6fcf1f4deeb7"),
                            Caption = "Image for Glass Beaker Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6576),
                            FileSize = 21504L,
                            ImagePath = "https://img.lovepik.com/original_origin_pic/18/08/09/ad4800dc49f64e450ae5f7d2c15bbd69.png_wh300.png",
                            ProductId = new Guid("f385650c-be71-467b-b293-5afc487fc53c")
                        },
                        new
                        {
                            Id = new Guid("cebec853-8040-4aab-8a06-f537363ae780"),
                            Caption = "Image for High-Quality Ruler Set",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6579),
                            FileSize = 22528L,
                            ImagePath = "https://img.lovepik.com/png/20231021/School-office-supplies-binding-machine-stapler-book-stationery_289576_wh300.png",
                            ProductId = new Guid("58096fa8-3778-4d41-9858-843eb3dc6d14")
                        },
                        new
                        {
                            Id = new Guid("46c940a2-a14f-49cb-b8f8-b572bd73452d"),
                            Caption = "Image for Elegant Fountain Pen",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6582),
                            FileSize = 23552L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-cute.jpg",
                            ProductId = new Guid("67125c24-ef8e-40fe-91e6-7fc424b7f277")
                        },
                        new
                        {
                            Id = new Guid("564fc107-5e75-4fac-976c-669ad20ef121"),
                            Caption = "Image for Spiral Notebook",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6586),
                            FileSize = 24576L,
                            ImagePath = "https://tomau.vn/wp-content/uploads/tranh-to-mau-do-dung-hoc-tap-de-thuong.jpg",
                            ProductId = new Guid("4de03fab-46a7-43a6-b021-c217cceecf4b")
                        },
                        new
                        {
                            Id = new Guid("3528c4f0-60ad-4ac7-8a64-4850c353e007"),
                            Caption = "Image for Digital Thermometer",
                            DateCreated = new DateTime(2024, 7, 26, 9, 46, 56, 512, DateTimeKind.Utc).AddTicks(6589),
                            FileSize = 25600L,
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQClbO9Pb9b1e1cm18mublklMG69UYXdPgGgbeNGPutxgObEWNt0gMTNXmOHZInEp8O1ro&usqp=CAU",
                            ProductId = new Guid("835ac99f-3a70-4684-ad2c-753d0ec444d3")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PreOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("PreOrderId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0af02748-9d43-4110-81e5-93d9ece8cfda"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhkhoa@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Minh",
                            IsActive = false,
                            LastName = "Khoa",
                            Password = "$2a$11$lLWYUbXaFJBkti73offNi.2awewab8kPzDwAJzluNRzOt6EPfwGYK",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            UserImageUrl = "",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = new Guid("b6b6e80f-cc04-43e3-800f-a3c89b3ba017"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamthanh@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Pham",
                            IsActive = false,
                            LastName = "Thanh",
                            Password = "$2a$11$ZQ7hPNb0DnOpzuoRCu1KrOl85XyxDrMmcgnRRmGMw0NdjSF/uVMMm",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "moderator"
                        },
                        new
                        {
                            UserId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phuongthao@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Phuong",
                            IsActive = false,
                            LastName = "Thao",
                            Password = "$2a$11$TV.0Ja9TgHgW3FB.b.OrtuJBYzlAGA8opYNylLoqjv4eSwsiGOHba",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "phuongthao"
                        },
                        new
                        {
                            UserId = new Guid("fda6e282-e429-4364-a445-136b570e2fde"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quoctrieu@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Quoc",
                            IsActive = false,
                            LastName = "Trieu",
                            Password = "$2a$11$kmePAgyeUMAPd96Q3B86TOTf43.FZB7K6hCC9PcCZ3bV3nU4XEjhS",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "quoctrieu"
                        },
                        new
                        {
                            UserId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haugiang@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Hau",
                            IsActive = false,
                            LastName = "Giang",
                            Password = "$2a$11$N3hzDsQTxWo9Bd8tIeL83eeSvofZKNhcTTM5KYUMI0.joAGnz2IaC",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "haugiang"
                        },
                        new
                        {
                            UserId = new Guid("4c99eef2-baca-4394-8d45-47e5f805e0f0"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhphuoc@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Minh",
                            IsActive = false,
                            LastName = "Phuoc",
                            Password = "$2a$11$zc86p8ziB2MuUUaqk8wRh.g7rH/5gBHz.pQplAevtBpZmGMZQe9ly",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "minhphuoc"
                        },
                        new
                        {
                            UserId = new Guid("8130b91b-2e32-4aad-8479-3e01dd8813e3"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haugiang01@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Hậu",
                            IsActive = false,
                            LastName = "Giang",
                            Password = "$2a$11$oWepJiSrlErwZH9deNBlIemkkefWckDbAVcpuRRmrCZQh6EvjZS1S",
                            PhoneNumber = "0123456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "haugiang45"
                        },
                        new
                        {
                            UserId = new Guid("273c8fa3-b3f4-4c6d-87da-07bc63a4c436"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1995, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "minhtran@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Minh",
                            IsActive = false,
                            LastName = "Trần",
                            Password = "$2a$11$htM6FVHwMSQErKBhIW9C/O584QlBfo.DpdjXRgzed5b9UcpUe9PWi",
                            PhoneNumber = "0987654321",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "minhtran"
                        },
                        new
                        {
                            UserId = new Guid("09481859-e811-4584-b2dd-0a74c8adfaaf"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thaonguyen@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Thảo",
                            IsActive = false,
                            LastName = "Nguyễn",
                            Password = "$2a$11$TlOq2lG68hkZwgrllEmk6eNbhXM80FvO61gizdnNV8VcaVgEyWYJ.",
                            PhoneNumber = "0912345678",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "thaonguyen"
                        },
                        new
                        {
                            UserId = new Guid("15b2d60f-bdfc-4ce1-8b03-f8b8c3d7480d"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1998, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anhpham@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Anh",
                            IsActive = false,
                            LastName = "Phạm",
                            Password = "$2a$11$j/kegIwF90X5cFIhTIUCL.ugCytKj/uUDe291TSCk/2H5LsOE5d46",
                            PhoneNumber = "0908765432",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "anhpham"
                        },
                        new
                        {
                            UserId = new Guid("d3bbeb03-d683-47cc-9ef0-0a2b36c2788a"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1996, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "namle@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Nam",
                            IsActive = false,
                            LastName = "Lê",
                            Password = "$2a$11$UzeAPOHCBxTzRYwqIZZrgOQ4Of2vDR7z4ISpcxp/H9AmITURcg9ta",
                            PhoneNumber = "0901234567",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "namle"
                        },
                        new
                        {
                            UserId = new Guid("ce914c08-8b01-483a-8b16-1c0e27284cc8"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lanhoang@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Lan",
                            IsActive = false,
                            LastName = "Hoàng",
                            Password = "$2a$11$5VtWP5ELxInfPJcGvudiMeqDDLNCcbUb4qcD/7DXQ3eOfueCWEKBe",
                            PhoneNumber = "0934567890",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "lanhoang"
                        },
                        new
                        {
                            UserId = new Guid("bf0b0b85-e98e-4da7-af44-b7198685cb78"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2002, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tudo@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Tú",
                            IsActive = false,
                            LastName = "Đỗ",
                            Password = "$2a$11$ALAsDDLJJ.JQYQHLoKMay.R/cusrCGC1M2W52V6nckciKGReRAvAW",
                            PhoneNumber = "0981234567",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "tudo"
                        },
                        new
                        {
                            UserId = new Guid("fefd096b-eb6f-4843-a9fb-fdde2f08e960"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quynhphan@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Quỳnh",
                            IsActive = false,
                            LastName = "Phan",
                            Password = "$2a$11$rxgBpSGEGsxLaCXjmOfWle95tCqEF/mWcE8uxYJN7snjJMef.6oFS",
                            PhoneNumber = "0908761234",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "quynhphan"
                        },
                        new
                        {
                            UserId = new Guid("97108917-856a-42af-937b-7b0e2e735b20"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1997, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huongtrinh@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Hương",
                            IsActive = false,
                            LastName = "Trịnh",
                            Password = "$2a$11$dshRg7dR010IZBiC7r9FBuJR6ZQzPfMK5yajyh8EjGLkLqLjS2Buq",
                            PhoneNumber = "0937894561",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "huongtrinh"
                        },
                        new
                        {
                            UserId = new Guid("0da4bfc5-3a37-4a66-91d5-fe9e1d086564"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2004, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khangvo@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Khang",
                            IsActive = false,
                            LastName = "Võ",
                            Password = "$2a$11$eBPF34hPNOUqFBOflPE5bu1VNgLS3nJCvO5AxgHQ4uIBmdYNo15ne",
                            PhoneNumber = "0923456789",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "khangvo"
                        },
                        new
                        {
                            UserId = new Guid("f58236aa-5912-489a-8ffb-001d61e611c8"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2002, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenvana@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Nguyen",
                            IsActive = false,
                            LastName = "Van A",
                            Password = "$2a$11$so3cbCuYZfh0gKqidIL.FOrdLKHVEYSoQ2/DrGXIfuzuw3MsGPYpG",
                            PhoneNumber = "0902345678",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "nguyenvana"
                        },
                        new
                        {
                            UserId = new Guid("803b1549-478c-421b-bd4b-2b6111836609"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2001, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lethib@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Le",
                            IsActive = false,
                            LastName = "Thi B",
                            Password = "$2a$11$EiZkRKDeVIu0kB7vJpCwv.cnijGwoTTUqNSge/F8WiLkOVY8Dgngi",
                            PhoneNumber = "0903456789",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "lethib"
                        },
                        new
                        {
                            UserId = new Guid("7c87c075-2c90-4c6e-8e8b-b903ec331072"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranvanc@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Tran",
                            IsActive = false,
                            LastName = "Van C",
                            Password = "$2a$11$qOOdPCpwqwx8vT0U472CZ.phB2cpLGjCVThURrQJJ2gcWVP06kGMa",
                            PhoneNumber = "0904567890",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "tranvanc"
                        },
                        new
                        {
                            UserId = new Guid("f370712b-0452-479c-a0d4-b4d2a7ace38f"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2003, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamthid@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Pham",
                            IsActive = false,
                            LastName = "Thi D",
                            Password = "$2a$11$HQmGVoc0fmu/qtjxkBmrSOEu0NDarKktsZ21WoTiVI2nWhB3wKYYy",
                            PhoneNumber = "0905678901",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "phamthid"
                        },
                        new
                        {
                            UserId = new Guid("a6f939d3-eb8a-4884-8084-b1dc99559167"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2004, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dovane@gmail.com",
                            EmailConfirm = true,
                            FirstName = "Do",
                            IsActive = false,
                            LastName = "Van E",
                            Password = "$2a$11$P0YwIIBJlnsU1BctGX648O.UNlQAV29glYi..H/eh0ms1EtjiQ/mm",
                            PhoneNumber = "0906789012",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "dovane"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.User", "Buyer")
                        .WithMany("PreOrderToBuyers")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.Product", "CurrentProduct")
                        .WithMany("ExchangeRequestsSent")
                        .HasForeignKey("CurrentProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Seller")
                        .WithMany("PreOrderToSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.Product", "TargetProduct")
                        .WithMany("ExchangeRequestsReceived")
                        .HasForeignKey("TargetProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("CurrentProduct");

                    b.Navigation("Seller");

                    b.Navigation("TargetProduct");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "UserUpload")
                        .WithMany("Products")
                        .HasForeignKey("UserUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserUpload");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithOne("Rate")
                        .HasForeignKey("GoodsExchange.Data.Models.Rating", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("ReportsMade")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Transaction", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.PreOrder", "PreOrder")
                        .WithOne("Transaction")
                        .HasForeignKey("GoodsExchange.Data.Models.Transaction", "PreOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PreOrder");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.PreOrder", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Navigation("ExchangeRequestsReceived");

                    b.Navigation("ExchangeRequestsSent");

                    b.Navigation("ProductImages");

                    b.Navigation("Rate")
                        .IsRequired();

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Navigation("PreOrderToBuyers");

                    b.Navigation("PreOrderToSellers");

                    b.Navigation("Products");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
