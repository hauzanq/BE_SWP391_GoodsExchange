// <auto-generated />
using System;
using GoodsExchange.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodsExchange.Data.Migrations
{
    [DbContext(typeof(GoodsExchangeDbContext))]
    [Migration("20240606071128_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("94d367d0-61d1-4979-ba88-99b2f83fe9eb"),
                            CategoryName = "Stationery"
                        },
                        new
                        {
                            CategoryId = new Guid("ce74fc86-9cdf-4805-960c-e4647f21f6cf"),
                            CategoryName = "Drawing Supplies"
                        },
                        new
                        {
                            CategoryId = new Guid("f0fde948-4e6d-4412-a417-3eac5f927d44"),
                            CategoryName = "Books and Materials"
                        },
                        new
                        {
                            CategoryId = new Guid("e0b58109-b173-442a-86d5-972e0bc3e093"),
                            CategoryName = "Tech Devices"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserUploadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserUploadId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("eee1a0c9-77c3-4fc1-b6a2-da34cf31c219"),
                            ApprovedDate = new DateTime(2023, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("94d367d0-61d1-4979-ba88-99b2f83fe9eb"),
                            Description = "Premium ballpoint pen for everyday use",
                            IsActive = true,
                            IsApproved = false,
                            Price = 2.99f,
                            ProductImageUrl = "https://example.com/ballpoint-pen.jpg",
                            ProductName = "Ballpoint Pen",
                            UploadDate = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("ef26caec-cebe-47cc-8e2f-baecbf5047fc"),
                            ApprovedDate = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("94d367d0-61d1-4979-ba88-99b2f83fe9eb"),
                            Description = "Durable mechanical pencil with 0.5mm lead",
                            IsActive = true,
                            IsApproved = false,
                            Price = 4.5f,
                            ProductImageUrl = "https://example.com/mechanical-pencil.jpg",
                            ProductName = "Mechanical Pencil",
                            UploadDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("dc3e969c-5a30-4028-8a96-db3f0dcd53de"),
                            ApprovedDate = new DateTime(2023, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("ce74fc86-9cdf-4805-960c-e4647f21f6cf"),
                            Description = "Set of 24 high-quality colored pencils",
                            IsActive = true,
                            IsApproved = false,
                            Price = 9.99f,
                            ProductImageUrl = "https://example.com/colored-pencils.jpg",
                            ProductName = "Colored Pencils",
                            UploadDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("864a10b2-8045-469d-a4f3-d52433195fa5"),
                            ApprovedDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("ce74fc86-9cdf-4805-960c-e4647f21f6cf"),
                            Description = "A5 size sketchbook with acid-free pages",
                            IsActive = true,
                            IsApproved = false,
                            Price = 12.99f,
                            ProductImageUrl = "https://example.com/sketchbook.jpg",
                            ProductName = "Sketchbook",
                            UploadDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("77e9bb4d-286e-4f0d-ab61-fac48c135cab"),
                            ApprovedDate = new DateTime(2023, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("f0fde948-4e6d-4412-a417-3eac5f927d44"),
                            Description = "High school-level chemistry textbook",
                            IsActive = true,
                            IsApproved = false,
                            Price = 29.99f,
                            ProductImageUrl = "https://example.com/chemistry-textbook.jpg",
                            ProductName = "Chemistry Textbook",
                            UploadDate = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("d96ccbb3-39c2-4d9e-b829-1705216664fa"),
                            ApprovedDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("f0fde948-4e6d-4412-a417-3eac5f927d44"),
                            Description = "Grade 7 mathematics practice workbook",
                            IsActive = false,
                            IsApproved = true,
                            Price = 14.99f,
                            ProductImageUrl = "https://example.com/math-workbook.jpg",
                            ProductName = "Mathematics Workbook",
                            UploadDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("6ede9679-64bd-48af-a1ef-b04f55ee8fa3"),
                            ApprovedDate = new DateTime(2023, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("e0b58109-b173-442a-86d5-972e0bc3e093"),
                            Description = "Scientific calculator with graphing capabilities",
                            IsActive = false,
                            IsApproved = true,
                            Price = 59.99f,
                            ProductImageUrl = "https://example.com/graphing-calculator.jpg",
                            ProductName = "Graphing Calculator",
                            UploadDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("79e9860d-efdc-43b6-8ca2-b077798f62ea"),
                            ApprovedDate = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("e0b58109-b173-442a-86d5-972e0bc3e093"),
                            Description = "High-performance tablet for educational use",
                            IsActive = false,
                            IsApproved = true,
                            Price = 299.99f,
                            ProductImageUrl = "https://example.com/tablet-computer.jpg",
                            ProductName = "Tablet Computer",
                            UploadDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("ec851619-5b2f-4a01-b2c8-ea4ec62c85ce"),
                            ApprovedDate = new DateTime(2023, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("94d367d0-61d1-4979-ba88-99b2f83fe9eb"),
                            Description = "Durable 30cm plastic ruler",
                            IsActive = false,
                            IsApproved = true,
                            Price = 1.5f,
                            ProductImageUrl = "https://example.com/ruler.jpg",
                            ProductName = "Ruler",
                            UploadDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ProductId = new Guid("d6afe29b-0a86-4e4f-b29d-28571e906767"),
                            ApprovedDate = new DateTime(2023, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = new Guid("94d367d0-61d1-4979-ba88-99b2f83fe9eb"),
                            Description = "Set of 4 fluorescent highlighters",
                            IsActive = false,
                            IsApproved = true,
                            Price = 3.99f,
                            ProductImageUrl = "https://example.com/highlighter-set.jpg",
                            ProductName = "Highlighter Set",
                            UploadDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserUploadId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reports", (string)null);

                    b.HasData(
                        new
                        {
                            ReportId = new Guid("bfcfd760-2ba4-4774-99aa-00acf8c900c0"),
                            CreateDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApprove = false,
                            ProductId = new Guid("eee1a0c9-77c3-4fc1-b6a2-da34cf31c219"),
                            Reason = "Spam content",
                            ReceiverId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            SenderId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ReportId = new Guid("c4a32b91-9b8a-49ba-b768-2479c6497a2a"),
                            CreateDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsApprove = true,
                            ProductId = new Guid("ef26caec-cebe-47cc-8e2f-baecbf5047fc"),
                            Reason = "Inappropriate content",
                            ReceiverId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            SenderId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ReportId = new Guid("82091caa-7314-469e-b12d-5db8306e5d00"),
                            CreateDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApprove = false,
                            ProductId = new Guid("dc3e969c-5a30-4028-8a96-db3f0dcd53de"),
                            Reason = "Copyright infringement",
                            ReceiverId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            SenderId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ReportId = new Guid("c12606a3-7a6e-4270-b384-53c595d1b862"),
                            CreateDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsApprove = true,
                            ProductId = new Guid("864a10b2-8045-469d-a4f3-d52433195fa5"),
                            Reason = "Misleading information",
                            ReceiverId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad"),
                            SenderId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c")
                        },
                        new
                        {
                            ReportId = new Guid("085f0d3c-1a6d-4eea-a21e-7c03534ac004"),
                            CreateDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApprove = false,
                            ProductId = new Guid("864a10b2-8045-469d-a4f3-d52433195fa5"),
                            Reason = "Hate speech",
                            ReceiverId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            SenderId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ReportId = new Guid("18cca700-284c-4536-ba85-2499fd3fe7d1"),
                            CreateDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsApprove = true,
                            ProductId = new Guid("77e9bb4d-286e-4f0d-ab61-fac48c135cab"),
                            Reason = "Illegal activity",
                            ReceiverId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            SenderId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ReportId = new Guid("14cc71ab-0c5f-4191-974a-5c0dd60e0e7c"),
                            CreateDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApprove = false,
                            ProductId = new Guid("6ede9679-64bd-48af-a1ef-b04f55ee8fa3"),
                            Reason = "Violation of terms of service",
                            ReceiverId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad"),
                            SenderId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c")
                        },
                        new
                        {
                            ReportId = new Guid("15d7971e-e5ff-4054-9433-b1601991eb71"),
                            CreateDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsApprove = true,
                            ProductId = new Guid("79e9860d-efdc-43b6-8ca2-b077798f62ea"),
                            Reason = "Harassment",
                            ReceiverId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            SenderId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13")
                        },
                        new
                        {
                            ReportId = new Guid("ece0382a-7a69-4515-9981-d7bc9add93a0"),
                            CreateDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApprove = false,
                            ProductId = new Guid("ec851619-5b2f-4a01-b2c8-ea4ec62c85ce"),
                            Reason = "Fraud",
                            ReceiverId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            SenderId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad")
                        },
                        new
                        {
                            ReportId = new Guid("46a2e50f-51eb-4f27-b4f4-7930af9b1d45"),
                            CreateDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsApprove = true,
                            ProductId = new Guid("d6afe29b-0a86-4e4f-b29d-28571e906767"),
                            Reason = "Violation of privacy",
                            ReceiverId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad"),
                            SenderId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("ca5af2d0-6b92-49bb-91ff-2e5d9f1279d4"),
                            RoleName = "Buyer"
                        },
                        new
                        {
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            RoleName = "Seller"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0af02748-9d43-4110-81e5-93d9ece8cfda"),
                            DateOfBirth = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirm = false,
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            Password = "123456789",
                            PhoneNumber = "555-1234567",
                            UserImageUrl = "",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = new Guid("b6b6e80f-cc04-43e3-800f-a3c89b3ba017"),
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirm = false,
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            Password = "123456789",
                            PhoneNumber = "555-7654321",
                            UserImageUrl = "",
                            UserName = "moderator"
                        },
                        new
                        {
                            UserId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad"),
                            DateOfBirth = new DateTime(1978, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.johnson@example.com",
                            EmailConfirm = false,
                            FirstName = "Michael",
                            IsActive = true,
                            LastName = "Johnson",
                            Password = "123456789",
                            PhoneNumber = "555-2468013",
                            UserImageUrl = "",
                            UserName = "buyer1"
                        },
                        new
                        {
                            UserId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            DateOfBirth = new DateTime(1990, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.davis@example.com",
                            EmailConfirm = false,
                            FirstName = "Emily",
                            IsActive = true,
                            LastName = "Davis",
                            Password = "123456789",
                            PhoneNumber = "555-3691258",
                            UserImageUrl = "",
                            UserName = "buyer2"
                        },
                        new
                        {
                            UserId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            DateOfBirth = new DateTime(1982, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirm = false,
                            FirstName = "David",
                            IsActive = true,
                            LastName = "Lee",
                            Password = "123456789",
                            PhoneNumber = "555-4725836",
                            UserImageUrl = "",
                            UserName = "seller"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0af02748-9d43-4110-81e5-93d9ece8cfda"),
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810")
                        },
                        new
                        {
                            UserId = new Guid("b6b6e80f-cc04-43e3-800f-a3c89b3ba017"),
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693")
                        },
                        new
                        {
                            UserId = new Guid("99d274e6-fa23-4d1c-8f8a-097b3886caad"),
                            RoleId = new Guid("ca5af2d0-6b92-49bb-91ff-2e5d9f1279d4")
                        },
                        new
                        {
                            UserId = new Guid("50248ca1-b632-4e16-b1a4-9aadd8e08e7c"),
                            RoleId = new Guid("ca5af2d0-6b92-49bb-91ff-2e5d9f1279d4")
                        },
                        new
                        {
                            UserId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b")
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "UserUpload")
                        .WithMany("Products")
                        .HasForeignKey("UserUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserUpload");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithOne("Rate")
                        .HasForeignKey("GoodsExchange.Data.Models.Rating", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("ReportsMade")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.UserRole", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Navigation("Rate")
                        .IsRequired();

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
