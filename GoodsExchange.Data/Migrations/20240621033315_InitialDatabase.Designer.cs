// <auto-generated />
using System;
using GoodsExchange.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GoodsExchange.Data.Migrations
{
    [DbContext(typeof(GoodsExchangeDbContext))]
    [Migration("20240621033315_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("119e60e0-789a-47e2-a280-e0c1a9a7032f"),
                            CategoryName = "School Supplies"
                        },
                        new
                        {
                            CategoryId = new Guid("0e02f639-a2d0-4f30-8da0-4b4b29aecb3c"),
                            CategoryName = "Art Supplies"
                        },
                        new
                        {
                            CategoryId = new Guid("d8e3ef2a-d4ba-4690-8ac0-6aaa5b434409"),
                            CategoryName = "Electronics"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserUploadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserUploadId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            RoleName = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0af02748-9d43-4110-81e5-93d9ece8cfda"),
                            DateOfBirth = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EmailConfirm = false,
                            FirstName = "John",
                            IsActive = false,
                            LastName = "Doe",
                            Password = "123456789",
                            PhoneNumber = "555-1234567",
                            RoleId = new Guid("e398cee3-6381-4a52-aaf5-20a2e9b54810"),
                            UserImageUrl = "",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = new Guid("b6b6e80f-cc04-43e3-800f-a3c89b3ba017"),
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EmailConfirm = false,
                            FirstName = "Jane",
                            IsActive = false,
                            LastName = "Smith",
                            Password = "123456789",
                            PhoneNumber = "555-7654321",
                            RoleId = new Guid("3d446530-061e-4a88-ae6c-1b6a6190a693"),
                            UserImageUrl = "",
                            UserName = "moderator"
                        },
                        new
                        {
                            UserId = new Guid("82c47d9c-b386-4050-a42c-95a220639c54"),
                            DateOfBirth = new DateTime(1978, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.johnson@example.com",
                            EmailConfirm = false,
                            FirstName = "Michael",
                            IsActive = false,
                            LastName = "Johnson",
                            Password = "123456",
                            PhoneNumber = "555-2468013",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "customerhihi"
                        },
                        new
                        {
                            UserId = new Guid("fda6e282-e429-4364-a445-136b570e2fde"),
                            DateOfBirth = new DateTime(1990, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.davis@example.com",
                            EmailConfirm = false,
                            FirstName = "Emily",
                            IsActive = false,
                            LastName = "Davis",
                            Password = "123456",
                            PhoneNumber = "555-3691258",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "customerhaha"
                        },
                        new
                        {
                            UserId = new Guid("d6446689-2743-460b-82c3-d25b21f87b13"),
                            DateOfBirth = new DateTime(1982, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirm = false,
                            FirstName = "David",
                            IsActive = false,
                            LastName = "Lee",
                            Password = "123456",
                            PhoneNumber = "555-4725836",
                            RoleId = new Guid("d81f428f-9572-47f1-a980-69de7a1e348b"),
                            UserImageUrl = "",
                            UserName = "customerhehe"
                        });
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "UserUpload")
                        .WithMany("Products")
                        .HasForeignKey("UserUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserUpload");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.ProductImage", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Rating", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithOne("Rate")
                        .HasForeignKey("GoodsExchange.Data.Models.Rating", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Report", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Receiver")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GoodsExchange.Data.Models.User", "Sender")
                        .WithMany("ReportsMade")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.HasOne("GoodsExchange.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Rate")
                        .IsRequired();

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GoodsExchange.Data.Models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
